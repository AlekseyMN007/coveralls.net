{"repo_token":"IMADETHISUPJUSTNOW","service_job_id":"   ","service_name":"coveralls.net","source_files":[{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls.Tests/CoverageFileBuilderTests.cs","source":"using System;\nusing Xunit;\n\nnamespace csmacnz.Coveralls.Tests\n{\n    public class CoverageFileBuilderTests\n    {\n        [Fact]\n        public void CanConstructBuilder()\n        {\n            var builder = CreateFileBuilder();\n            Assert.NotNull(builder);\n        }\n\n        [Fact]\n        public void NewBuilderCanCreateCoverageFile()\n        {\n            var builder = CreateFileBuilder();\n            var coverageFile = builder.CreateFile();\n            Assert.NotNull(coverageFile);\n        }\n\n        public class WhenCreatingACoverageFromADefaultBuilder\n        {\n            private readonly CoverageFile _coverageFile;\n            private const string Filename = @\"C:\\sourceFile.cs\";\n\n            public  WhenCreatingACoverageFromADefaultBuilder()\n            {\n                var builder = CreateFileBuilder(Filename);\n                _coverageFile = builder.CreateFile();\n            }\n\n            [Fact]\n            public void ThenFileNameIsSet()\n            {\n                Assert.Equal(Filename, _coverageFile.Name);\n            }\n\n            [Fact]\n            public void ThenSourceIsEmpty()\n            {\n                Assert.Equal(string.Empty, _coverageFile.Source);\n            }\n\n            [Fact]\n            public void ThenCoverageIsEmpty()\n            {\n                Assert.NotNull(_coverageFile.Coverage);\n                Assert.Equal(1, _coverageFile.Coverage.Length);\n                Assert.Null(_coverageFile.Coverage[0]);\n            }\n        }\n\n        [Fact]\n        public void NewBuilderWithInvalidPathThrowsArgumentException()\n        {\n            Assert.Throws<ArgumentException>(() => new CoverageFileBuilder(\"\"));\n        }\n\n        public static CoverageFileBuilder CreateFileBuilder(string filePath = @\"C:\\temp\\file.cs\")\n        {\n            return new CoverageFileBuilder(filePath);\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,1,1,1,null,null,null,null,1,1,1,1,null,null,null,null,null,null,3,null,3,3,3,null,null,null,null,1,1,null,null,null,null,1,1,null,null,null,null,1,1,1,1,null,null,null,null,null,1,1,null,null,null,5,null,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls.Tests/OpenCoverParserTests.cs","source":"using System.Collections.Generic;\nusing System.IO;\nusing System.Reflection;\nusing System.Xml;\nusing System.Xml.Linq;\nusing Xunit;\n\nnamespace csmacnz.Coveralls.Tests\n{\n    public class OpenCoverParserTests\n    {\n        private const string SingleFileReportSourceFilePath = @\"c:\\Users\\Mark\\Documents\\Visual Studio 2013\\Projects\\OpenCoverTesting\\OpenCoverTesting\\Class1.cs\";\n        private const string ExpectedSingleFileReportSourceFilePath = @\"c:/Users/Mark/Documents/Visual Studio 2013/Projects/OpenCoverTesting/OpenCoverTesting/Class1.cs\";\n\n        [Fact]\n        public void EmptyReportLoadsNoSourceFiles()\n        {\n            var document = LoadDocumentFromResource(\"csmacnz.Coveralls.Tests.EmptyReport.xml\");\n\n            var results = CreateOpenCoverParser().GenerateSourceFiles(document);\n\n            Assert.Equal(0, results.Count);\n        }\n\n        [Fact]\n        public void SingleFileReportLoadsSingleSourceFiles()\n        {\n            var document = LoadDocumentFromResource(\"csmacnz.Coveralls.Tests.SingleFileReport.xml\");\n\n            var results = CreateOpenCoverParser().GenerateSourceFiles(document);\n\n            Assert.Equal(1, results.Count);\n        }\n\n        [Fact]\n        public void SingleFileReportWithSingleMethodLineCoveredWithoutSourceLoadsCorrectly()\n        {\n            var document = LoadDocumentFromResource(\"csmacnz.Coveralls.Tests.SingleFileReportOneLineCovered.xml\");\n\n            var results = CreateOpenCoverParserForSingleFileReport().GenerateSourceFiles(document);\n\n            AssertSingleFileResult(ExpectedSingleFileReportSourceFilePath, 12, results);\n            Assert.Equal(1, results[0].Coverage[8]);\n        }\n\n        [Fact]\n        public void SingleFileReportWithSingleMethodLineUncoveredWithoutSourceLoadsCorrectly()\n        {\n            var document = LoadDocumentFromResource(\"csmacnz.Coveralls.Tests.SingleFileReportOneLineUncovered.xml\");\n\n            var results = CreateOpenCoverParserForSingleFileReport().GenerateSourceFiles(document);\n            \n            AssertSingleFileResult(ExpectedSingleFileReportSourceFilePath, 12, results);\n            Assert.Equal(0, results[0].Coverage[8]);\n        }\n\n        private OpenCoverParser CreateOpenCoverParser()\n        {\n            return new OpenCoverParser(new TestFileSystem());\n        }\n\n        private OpenCoverParser CreateOpenCoverParserForSingleFileReport()\n        {\n            var testFileSystem = new TestFileSystem();\n            var singleFileReportSourceContent = LoadContentFromResource(\"csmacnz.Coveralls.Tests.SingleFileReportSourceFile.txt\");\n            testFileSystem.AddFile(SingleFileReportSourceFilePath, singleFileReportSourceContent);\n            return new OpenCoverParser(testFileSystem);\n        }\n\n        private static XDocument LoadDocumentFromResource(string embeddedResource)\n        {\n            XDocument document;\n            var executingAssembly = Assembly.GetExecutingAssembly();\n            using (var stream = executingAssembly.GetManifestResourceStream(embeddedResource))\n            {\n                Assert.NotNull(stream);\n                using (var reader = XmlReader.Create(stream))\n                {\n                    document = XDocument.Load(reader);\n                }\n            }\n            return document;\n        }\n\n        private static string LoadContentFromResource(string embeddedResource)\n        {\n            string content;\n            var executingAssembly = Assembly.GetExecutingAssembly();\n            using (var stream = executingAssembly.GetManifestResourceStream(embeddedResource))\n            {\n                Assert.NotNull(stream);\n                using (var reader = new StreamReader(stream))\n                {\n                    content = reader.ReadToEnd();\n                }\n            }\n            return content;\n        }\n\n        private void AssertSingleFileResult(string expectedFileName, int expectedLength, List<CoverageFile> results)\n        {\n            Assert.Equal(1, results.Count);\n            Assert.Equal(expectedFileName, results[0].Name);\n            Assert.Equal(expectedLength, results[0].Coverage.Length);\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,1,1,null,null,null,null,1,null,1,null,1,1,null,null,null,null,1,null,1,null,1,1,1,null,null,null,null,1,null,1,null,1,1,1,null,null,null,2,null,null,null,null,2,2,2,2,null,null,null,null,null,4,4,null,4,4,null,4,null,null,4,null,null,null,null,null,2,2,null,2,2,null,2,null,null,2,null,null,null,null,2,2,2,2,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls.Tests/TestFileSystem.cs","source":"using System.Collections.Generic;\n\nnamespace csmacnz.Coveralls.Tests\n{\n    public class TestFileSystem : IFileSystem\n    {\n        private readonly Dictionary<string, string> _files = new Dictionary<string, string>();\n\n        public string TryLoadFile(string filePath)\n        {\n            if (_files.ContainsKey(filePath))\n            {\n                return _files[filePath];\n            }\n            return null;\n        }\n\n        public void AddFile(string path, string contents)\n        {\n            _files[path] = contents;\n        }\n    }\n}","coverage":[null,null,null,null,null,null,4,null,null,null,3,null,2,null,1,null,null,null,null,2,2,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/CoverageFile.cs","source":"using System;\nusing Newtonsoft.Json;\n\nnamespace csmacnz.Coveralls\n{\n    public sealed class CoverageFile\n    {\n        public CoverageFile(string name, string[] source, int?[] coverage)\n        {\n            if (string.IsNullOrEmpty(name)) throw new ArgumentException(\"name\");\n            if (source == null) throw new ArgumentException(\"source\");\n            if (coverage == null) throw new ArgumentException(\"coverage\");\n            if (source.Length > 0 && coverage.Length != source.Length) throw new ArgumentOutOfRangeException(\"coverage\");\n\n            Name = name;\n            Source = string.Join(\"\\n\",source);\n            Coverage = coverage;\n        }\n\n        [JsonProperty(\"name\")]\n        public string Name { get; private set; }\n\n        [JsonProperty(\"source\")]\n        public string Source { get; private set; }\n\n        [JsonProperty(\"coverage\")]\n        public int?[] Coverage { get; private set; }\n    }\n}","coverage":[null,null,null,null,null,null,null,7,null,0,0,0,0,null,7,7,7,7,null,null,null,null,null,null,null,null,null,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/CoverageFileBuilder.cs","source":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace csmacnz.Coveralls\n{\n    public class CoverageFileBuilder\n    {\n        private readonly string _filePath;\n        private readonly Dictionary<int,int> _coverage = new Dictionary<int, int>();\n        private List<string> _sourceLines;\n\n        public CoverageFileBuilder(string filePath)\n        {\n            if (string.IsNullOrWhiteSpace(filePath))\n            {\n                throw new ArgumentException(\"filePath\");\n            }\n            _filePath = filePath;\n        }\n\n        public void AddSource(string source)\n        {\n            List<string> lines = new List<string>();\n            using (var sr = new StringReader(source))\n            {\n                string nextLine;\n                while ((nextLine = sr.ReadLine()) != null)\n                {\n                    lines.Add(nextLine);\n                }\n            }\n            _sourceLines = lines;\n        }\n\n        public void RecordCoverage(int lineNumber, int coverageNumber)\n        {\n            _coverage[lineNumber - 1] = coverageNumber;\n        }\n\n        public CoverageFile CreateFile()\n        {\n            var length = _sourceLines != null ? _sourceLines.Count : _coverage.Any() ? _coverage.Max(c => c.Key) + 1 : 1;\n            var coverage = Enumerable.Range(0, length)\n                .Select(index => _coverage.ContainsKey(index) ? (int?) _coverage[index] : null)\n                .ToArray();\n            var sourceLines = _sourceLines != null ? _sourceLines.ToArray() : new string[0];\n            return new CoverageFile(_filePath, sourceLines, coverage);\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,9,null,null,9,null,9,null,1,null,8,8,null,null,null,2,2,null,null,26,null,24,null,null,2,2,null,null,null,7,7,null,null,null,1,7,33,null,7,7,null,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/FileSystem.cs","source":"using System.IO;\n\nnamespace csmacnz.Coveralls\n{\n    public class FileSystem : IFileSystem\n    {\n        public string TryLoadFile(string filePath)\n        {\n            if (File.Exists(filePath))\n            {\n                return File.ReadAllText(filePath);\n            }\n            return null;\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,0,null,0,null,0,null,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/OpenCoverParser.cs","source":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Xml.Linq;\n\nnamespace csmacnz.Coveralls\n{\n    public class OpenCoverParser\n    {\n        private readonly IFileSystem _fileSystem;\n\n        public OpenCoverParser(IFileSystem fileSystem)\n        {\n            _fileSystem = fileSystem;\n        }\n\n        public List<CoverageFile> GenerateSourceFiles(XDocument document)\n        {\n            var files = new List<CoverageFile>();\n            if (document.Root != null)\n            {\n                var xElement = document.Root.Element(\"Modules\");\n                if (xElement != null)\n                    foreach (var module in xElement.Elements(\"Module\"))\n                    {\n                        var attribute = module.Attribute(\"skippedDueTo\");\n                        if (attribute == null || string.IsNullOrEmpty(attribute.Value))\n                        {\n                            var filesElement = module.Element(\"Files\");\n                            if (filesElement != null)\n                            {\n                                foreach (var file in filesElement.Elements(\"File\"))\n                                {\n                                    var fileid = file.Attribute(\"uid\").Value;\n                                    var fullPath = file.Attribute(\"fullPath\").Value;\n                                    var compatibleFilePath = UnixifyPath(fullPath);\n                                    var coverageBuilder = new CoverageFileBuilder(compatibleFilePath);\n\n                                    var classesElement = module.Element(\"Classes\");\n                                    if (classesElement != null)\n                                    {\n                                        foreach (var @class in classesElement.Elements(\"Class\"))\n                                        {\n                                            var methods = @class.Element(\"Methods\");\n                                            if (methods != null)\n                                                foreach (var method in methods.Elements(\"Method\"))\n                                                {\n                                                    var sequencePointsElement = method.Element(\"SequencePoints\");\n                                                    if (sequencePointsElement != null)\n                                                        foreach (var sequencePoint in sequencePointsElement.Elements(\"SequencePoint\"))\n                                                        {\n                                                            var sequenceFileid = sequencePoint.Attribute(\"fileid\").Value;\n                                                            if (fileid == sequenceFileid)\n                                                            {\n                                                                var sourceLine = int.Parse(sequencePoint.Attribute(\"sl\").Value);\n                                                                var visitCount = int.Parse(sequencePoint.Attribute(\"vc\").Value);\n\n                                                                coverageBuilder.RecordCoverage(sourceLine, visitCount);\n                                                            }\n\n                                                        }\n                                                }\n                                        }\n                                    }\n\n                                    var readAllText = _fileSystem.TryLoadFile(fullPath);\n                                    if (readAllText != null)\n                                    {\n                                        coverageBuilder.AddSource(readAllText);\n                                    }\n                                    var coverageFile = coverageBuilder.CreateFile();\n                                    files.Add(coverageFile);\n                                }\n                            }\n                        }\n                    }\n            }\n            return files;\n        }\n\n        private string UnixifyPath(string fullPath)\n        {\n            return fullPath.Replace('\\\\', '/');\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,4,null,4,4,null,null,null,4,4,null,4,4,243,null,239,239,null,3,3,null,6,null,3,3,3,3,null,3,3,null,9,null,6,6,11,null,5,5,12,null,7,7,null,7,7,null,7,null,null,null,null,null,null,null,3,3,null,2,null,3,3,null,null,null,null,null,4,null,null,null,null,3,null,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/Program.cs","source":"using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net.Http;\nusing System.Reflection;\nusing System.Xml.Linq;\nusing Newtonsoft.Json;\n\nnamespace csmacnz.Coveralls\n{\n    public class Program\n    {\n        public static void Main(string[] argv)\n        {\n            var args = new MainArgs(argv, exit: true, version: Assembly.GetEntryAssembly().GetName().Version);\n            var repoToken = args.OptRepotoken;\n            if (string.IsNullOrWhiteSpace(repoToken))\n            {\n                Console.Error.WriteLine(\"parameter repoToken is required.\");\n                Console.WriteLine(MainArgs.Usage);\n                Environment.Exit(1);\n            }\n            var fileName = args.OptInput;\n            if (!File.Exists(fileName))\n            {\n                Console.Error.WriteLine(\"Input file '\" + fileName + \"' cannot be found\");\n                Environment.Exit(1);\n            }\n            var outputFile = args.OptOutput;\n            if (!string.IsNullOrWhiteSpace(outputFile) && File.Exists(outputFile))\n            {\n                Console.WriteLine(\"output file '{0}' already exists and will be overwritten.\", outputFile);\n                Environment.Exit(1);\n            }\n\n            var document = XDocument.Load(fileName);\n\n            List<CoverageFile> files = new OpenCoverParser(new FileSystem()).GenerateSourceFiles(document);\n\n            GitData gitData = null;\n            var commitId = args.OptCommitid ?? string.Empty;\n            if (!string.IsNullOrWhiteSpace(commitId))\n            {\n                var committerName = args.OptCommitauthor ?? string.Empty;\n                var comitterEmail = args.OptCommitemail ?? string.Empty;\n                var commitMessage = args.OptCommitmessage ?? string.Empty;\n                gitData = new GitData\n                {\n                    Head = new GitHead\n                    {\n                        Id = commitId,\n                        AuthorName = committerName,\n                        AuthorEmail = comitterEmail,\n                        CommitterName = committerName,\n                        ComitterEmail = comitterEmail,\n                        Message = commitMessage\n                    },\n                    Branch = args.OptCommitbranch ?? string.Empty\n                };\n            }\n\n            var serviceJobId = args.OptJobid ?? \"0\";\n\n            var data = new CoverallData\n            {\n                RepoToken = repoToken,\n                ServiceJobId = serviceJobId,\n                ServiceName = \"coveralls.net\",\n                SourceFiles = files.ToArray(),\n                Git = gitData\n            };\n\n            var fileData = JsonConvert.SerializeObject(data);\n            if (!string.IsNullOrWhiteSpace(outputFile))\n            {\n                WriteFileData(fileData, outputFile);\n            }\n            if (!args.OptDryrun)\n            {\n                var uploaded = Upload(@\"https://coveralls.io/api/v1/jobs\", fileData);\n                if (!uploaded)\n                {\n                    Console.Error.WriteLine(\"Failed to upload to coveralls\");\n                    Environment.Exit(1);\n                }\n            }\n        }\n\n        private static void WriteFileData(string fileData, string outputFile)\n        {\n            try\n            {\n                File.WriteAllText(outputFile, fileData);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(\"Failed to write data to output file '{0}'.\", outputFile);\n            }\n        }\n\n        private static bool Upload(string url, string fileData)\n        {\n            HttpContent stringContent = new StringContent(fileData);\n\n            using (var client = new HttpClient())\n            using (var formData = new MultipartFormDataContent())\n            {\n                formData.Add(stringContent, \"json_file\", \"coverage.json\");\n\n                var response = client.PostAsync(url, formData).Result;\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    return false;\n                }\n                return true;\n            }\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,null,0,null,0,null,0,0,0,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,null,null,null,null,null,0,0,null,0,null,0,null,0,0,null,0,0,null,null,0,null,null,null,null,null,0,null,0,null,0,null,0,null,null,null,0,null,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,null]},{"name":"c:/Users/mark/Documents/GitHub/coveralls.net/src/csmacnz.Coveralls/T4DocoptNet.cs","source":"using System.Collections;\nusing System.Collections.Generic;\nusing DocoptNet;\n\nnamespace csmacnz.Coveralls\n{\n    // Generated class for Main.usage.txt\n    public class MainArgs\n    {\n        public const string Usage = @\"csmac.Coveralls - a coveralls.io coverage publisher for .Net\n\nUsage:\n  csmacnz.Coveralls --opencover -i ./opencovertests.xml --repoToken <repoToken> [-o ./opencovertests.json] [--dryrun] [--commitId <commitId> --commitBranch <commitBranch> [--commitAuthor <commitAuthor> --commitEmail <commitEmail> --commitMessage <commitMessage>] ] [--jobId <jobId>]\n  csmacnz.Coveralls --version\n  csmacnz.Coveralls --help\n\nOptions:\n -h, --help                      Show this screen.\n --version                       Show version.\n -i <file>, --input <file>       The coverage source file location.\n -o <file>, --output <file>      The coverage results json will be written to this file it provided. \n --dryrun                        This flag will stop coverage results being posted to coveralls.io\n --opencover                     Reads input as OpenCover data.\n --repoToken <repoToken>         The coveralls.io repository token.\n --commitId <commitId>           The git commit hash for the coverage report.\n --commitAuthor <commitAuthor>   The git commit author for the coverage report.\n --commitEmail <commitEmail>     The git commit author email for the coverage report.\n --commitMessage <commitMessage> The git commit message for the coverage report.\n --commitBranch <commitBranch>   The git branch for the coverage report.\n --jobId <jobId>                 The job Id to provide to coveralls.io.\n\nWhat its for:\n Reads your .Net code coverage output data and submits it to\n coveralls.io's service. This can be used by your build scripts \n or with a CI builder server.\";\n        private readonly IDictionary<string, ValueObject> _args;\n        \n        public MainArgs(\n            ICollection<string> argv, \n            bool help = true,\n            object version = null, \n            bool optionsFirst = false, \n            bool exit = false)\n        {\n            _args = new Docopt().Apply(Usage, argv, help, version, optionsFirst, exit);\n        }\n\n        public IDictionary<string, ValueObject> Args\n        {\n            get { return _args; }\n        }\n\t\tpublic bool OptOpencover { get { return _args[\"--opencover\"].IsTrue; } }\n\t\tpublic string OptInput { get { return _args[\"--input\"].ToString(); } }\n\t\tpublic string OptRepotoken { get { return _args[\"--repoToken\"].ToString(); } }\n\t\tpublic string OptOutput { get { return _args[\"--output\"].ToString(); } }\n\t\tpublic bool OptDryrun { get { return _args[\"--dryrun\"].IsTrue; } }\n\t\tpublic string OptCommitid { get { return _args[\"--commitId\"].ToString(); } }\n\t\tpublic string OptCommitbranch { get { return _args[\"--commitBranch\"].ToString(); } }\n\t\tpublic string OptCommitauthor { get { return _args[\"--commitAuthor\"].ToString(); } }\n\t\tpublic string OptCommitemail { get { return _args[\"--commitEmail\"].ToString(); } }\n\t\tpublic string OptCommitmessage { get { return _args[\"--commitMessage\"].ToString(); } }\n\t\tpublic string OptJobid { get { return _args[\"--jobId\"].ToString(); } }\n\t\tpublic bool OptVersion { get { return _args[\"--version\"].IsTrue; } }\n\t\tpublic bool OptHelp { get { return _args[\"--help\"].IsTrue; } }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,null,null,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null]}]}